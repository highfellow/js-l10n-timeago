/*
 *  Generated by CoffeeScript 1.3.3
 *
 *  Original code from:
 *  https://github.com/pragmaticly/smart-time-ago
 * 
 *  This version adapted for requirejs / l10n.js
 *  
 *  Changes copyright to:
 *  Andrew Baxter <andy@highfellow.org> December 2012.
 * 
 *  Original license text:
 * 
 *  Copyright (c) 2012 Terry Tai, Pragmatic.ly (terry@pragmatic.ly, https://pragmatic.ly/)
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
 */

define(['l10n'],
    function(l10n) {
      function TimeAgo(element, options) {
        this.startInterval = 60000;
        this.init(element, options);
      }
  
      TimeAgo.prototype.init = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.timeago.defaults, options);
        this.updateTime();
        return this.startTimer();
      };
  
      TimeAgo.prototype.startTimer = function() {
        var self;
        self = this;
        return this.interval = setInterval((function() {
          return self.refresh();
        }), this.startInterval);
      };
  
      TimeAgo.prototype.stopTimer = function() {
        return clearInterval(this.interval);
      };
  
      TimeAgo.prototype.restartTimer = function() {
        this.stopTimer();
        return this.startTimer();
      };
  
      TimeAgo.prototype.refresh = function() {
        this.updateTime();
        return this.updateInterval();
      };
  
      TimeAgo.prototype.updateTime = function() {
        var self;
        self = this;
        return this.$element.findAndSelf(this.options.selector).each(function() {
          var timeAgoInWords;
          timeAgoInWords = self.timeAgoInWords($(this).attr(self.options.attr));
          return $(this).html(timeAgoInWords);
        });
      };
  
      TimeAgo.prototype.updateInterval = function() {
        var filter, newestTime, newestTimeInMinutes, newestTimeSrc;
        if (this.$element.findAndSelf(this.options.selector).length > 0) {
          if (this.options.dir === "up") {
            filter = ":first";
          } else if (this.options.dir === "down") {
            filter = ":last";
          }
          newestTimeSrc = this.$element.findAndSelf(this.options.selector).filter(filter).attr(this.options.attr);
          newestTime = this.parse(newestTimeSrc);
          newestTimeInMinutes = this.getTimeDistanceInMinutes(newestTime);
          if (newestTimeInMinutes >= 0 && newestTimeInMinutes <= 44 && this.startInterval !== 60000) {
            this.startInterval = 60000;
            return this.restartTimer();
          } else if (newestTimeInMinutes >= 45 && newestTimeInMinutes <= 89 && this.startInterval !== 60000 * 22) {
            this.startInterval = 60000 * 22;
            return this.restartTimer();
          } else if (newestTimeInMinutes >= 90 && newestTimeInMinutes <= 2519 && this.startInterval !== 60000 * 30) {
            this.startInterval = 60000 * 30;
            return this.restartTimer();
          } else if (newestTimeInMinutes >= 2520 && this.startInterval !== 60000 * 60 * 12) {
            this.startInterval = 60000 * 60 * 12;
            return this.restartTimer();
          }
        }
      };
  
      TimeAgo.prototype.timeAgoInWords = function(timeString) {
        var absolutTime;
        absolutTime = this.parse(timeString);
        return "" + this.options.lang.prefixes.ago + (this.distanceOfTimeInWords(absolutTime));
      };
  
      TimeAgo.prototype.parse = function(iso8601) {
        var timeStr;
        timeStr = $.trim(iso8601);
        timeStr = timeStr.replace(/\.\d\d\d+/, "");
        timeStr = timeStr.replace(/-/, "/").replace(/-/, "/");
        timeStr = timeStr.replace(/T/, " ").replace(/Z/, " UTC");
        timeStr = timeStr.replace(/([\+\-]\d\d)\:?(\d\d)/, " $1$2");
        return new Date(timeStr);
      };
  
      TimeAgo.prototype.getTimeDistanceInMinutes = function(absolutTime) {
        var timeDistance;
        timeDistance = new Date().getTime() - absolutTime.getTime();
        return Math.round((Math.abs(timeDistance) / 1000) / 60);
      };
  
      TimeAgo.prototype.distanceOfTimeInWords = function(absolutTime) {
        var dim;
        dim = this.getTimeDistanceInMinutes(absolutTime);
        if (dim && !isNaN(dim)) {
          if (dim === 0) {
            return "now";
          } else if (dim === 1) {
            return "1 " + this.options.lang.units.minute;
          } else if (dim >= 2 && dim <= 44) {
            return "" + dim + " " + this.options.lang.units.minutes;
          } else if (dim >= 45 && dim <= 89) {
            return "1 " + this.options.lang.units.hour;
          } else if (dim >= 90 && dim <= 1439) {
            return "" + (Math.round(dim / 60)) + " " + this.options.lang.units.hours;
          } else if (dim >= 1440 && dim <= 2519) {
            return "1 " + this.options.lang.units.day;
          } else if (dim >= 2520 && dim <= 43199) {
            return "" + (Math.round(dim / 1440)) + " " + this.options.lang.units.days;
          } else if (dim >= 43200 && dim <= 86399) {
            return "1 " + this.options.lang.units.month;
          } else if (dim >= 86400 && dim <= 525599) {
            return "" + (Math.round(dim / 43200)) + " " + this.options.lang.units.months;
          } else if (dim >= 525600 && dim <= 655199) {
            return "1 " + this.options.lang.units.year;
          } else if (dim >= 655200 && dim <= 914399) {
            return "" + this.options.lang.prefixes.over + " 1 " + this.options.lang.units.year;
          } else if (dim >= 914400 && dim <= 1051199) {
            return "" + this.options.lang.prefixes.almost + " 2 " + this.options.lang.units.years;
          } else {
            return "" + (Math.round(dim / 525600)) + " " + this.options.lang.units.years;
          }
        } else {
          return "";
        }
      };

      $.fn.timeago = function(options) {
        if (options == null) {
          options = {};
        }
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data("timeago");
          if (!data) {
            $this.data("timeago", new TimeAgo(this, options));
          }
          if (typeof options === 'string') {
            return data[options]();
          }
        });
      };
    
      $.fn.findAndSelf = function(selector) {
        return this.find(selector).add(this.filter(selector));
      };
    
      $.fn.timeago.Constructor = TimeAgo;
    
      $.fn.timeago.defaults = {
        selector: 'time.timeago',
        l10nBase: 'timeAgo',
        attr: 'datetime',
        dir: 'up',
        lang: {
          units: {
            second: "second",
            seconds: "seconds",
            minute: "minute",
            minutes: "minutes",
            hour: "hour",
            hours: "hours",
            day: "day",
            days: "days",
            month: "month",
            months: "months",
            year: "year",
            years: "years"
          },
          prefixes: {
            over: "over",
            almost: "almost",
            ago: ""
          }
        }
      };
  
      return TimeAgo;
 
    });
  
  
